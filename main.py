import config
import asyncio
import logging
import sys
from os import getenv
from typing import Any, Dict

from aiogram import Bot, Dispatcher, F, Router, html, exceptions
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
import re
import hashlib

form_router = Router()


class Form(StatesGroup):
    id = State()


@form_router.message(CommandStart())
async def command_start(
    message: Message, state: FSMContext, command: CommandObject
) -> None:
    if not command.args:
        await state.clear()
        await message.answer(
            f"üîó –í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞, –æ–ø—É–±–ª–∏–∫—É–π –µ—ë –∏ –ø–æ–ª—É—á–∞–π –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n<code>t.me/anonymous_post_bot?start={message.from_user.id}</code>",
            reply_markup=ReplyKeyboardRemove(),
        )
    elif command.args == str(message.from_user.id):
        await state.clear()
        await message.answer(
            f"‚õîÔ∏è –ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ",
            reply_markup=ReplyKeyboardRemove(),
        )
    else:
        try:
            chat = await message.bot.get_chat(command.args)
            await state.set_state(Form.id)
            await state.update_data(id=command.args)
            await message.answer(
                f"üí¨ –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è {'@' + chat.username if chat.username else chat.full_name}",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚õîÔ∏è –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True
                ),
            )
        except exceptions.TelegramBadRequest:
            await state.clear()
            await message.answer(
                "‚õîÔ∏è –ò–∑–≤–∏–Ω–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=ReplyKeyboardRemove()
            )


@form_router.message(Command("cancel"))
@form_router.message(F.text == "‚õîÔ∏è –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(
        "‚õîÔ∏è –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        reply_markup=ReplyKeyboardRemove(),
    )


@form_router.message(Form.id)
async def process_id(message: Message, state: FSMContext) -> None:
    current_state = await state.get_data()
    id = current_state.get("id")
    await state.clear()
    if not id:
        await message.answer("‚õîÔ∏è –û—à–∏–±–∫–∞", reply_markup=ReplyKeyboardRemove())
    else:
        try:
            await message.bot.send_message(
                id, f"üì® <b>–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n{message.text}"
            )
            await message.answer(
                "‚úÖ C–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
                reply_markup=ReplyKeyboardRemove(),
            )
            await message.answer(
                "<i>–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?</i>",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë",
                                url=f"t.me/anonymous_post_bot?start={id}",
                            )
                        ]
                    ]
                ),
            )
        except exceptions.TelegramBadRequest:
            await state.clear()
            await message.answer(
                "‚õîÔ∏è –ò–∑–≤–∏–Ω–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=ReplyKeyboardRemove()
            )


async def main():
    bot = Bot(token=config.TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher()
    dp.include_router(form_router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
